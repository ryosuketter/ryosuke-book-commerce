// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// PrismaというORM (Object-Relational Mapping) ツールを使用したプロジェクトのスキーマファイルの一部です。

// PrismaのクライアントライブラリがJavaScript用であることを指定しています。
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // データベースの種類としてPostgreSQLを使用
  url      = env("POSTGRES_PRISMA_URL")  // データベースへの接続情報が環境変数 POSTGRES_PRISMA_URL に保存されている
  directUrl = env("POSTGRES_URL_NON_POOLING")  // 特定の設定やテスト用のデータベース接続情報も環境変数から読み込まれることを示しています。ここで指定されている NON_POOLING は、コネクションプーリングを使用しない接続を意味します。
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")  // 本番データベースに影響を与えることなく、マイグレーションを実行できます。
}

// https://next-auth.js.org/v3/adapters/prisma
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

// User モデル
// id: ユーザーの一意の識別子。cuid() を使用してデフォルト値を生成。
// name: ユーザーの名前。オプショナル。
// email: ユーザーのメールアドレス。一意である必要があります。
// emailVerified: メールアドレスが確認された日時。
// image: ユーザーの画像URL。オプショナル。
// createdAt: ユーザーが作成された日時。デフォルトは現在時刻。
// updatedAt: ユーザー情報が最後に更新された日時。自動更新。
// accounts: Account モデルへのリレーション。ユーザーが持つアカウント。
// sessions: Session モデルへのリレーション。ユーザーのセッション。
// purchases: Purchase モデルへのリレーション。ユーザーの購入履歴。複数存在可能。
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]  // 購入履歴へのリレーション
}

// Purchase モデル
// id: 購入記録の一意の識別子。cuid() を使用してデフォルト値を生成。
// userId: 購入したユーザーのID。User モデルへの外部キー。
// bookId: 購入した本のID。このIDはMicroCMSで管理される。
// createdAt: 購入が行われた日時。デフォルトは現在時刻。
// user: User モデルへのリレーション。onDelete: Cascade が設定されており、ユーザーが削除された場合、関連する購入記録も削除されます。
//  references: [id]は、関連付けられるモデル（この場合はUserモデル）の中で、userIdが参照するフィールドを指定します。ここではUserモデルのidフィールドが指定されています。
model Purchase {
  id        String   @id @default(cuid())
  userId    String   // 購入したユーザーのID
  bookId    String   // 購入した本のID (MicroCMSのID)
  createdAt DateTime @default(now()) // 購入日時
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Userモデルへのリレーション
}


model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
